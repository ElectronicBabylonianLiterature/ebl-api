name: CI

on:
  push:
  pull_request:
    branches: [master]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PIPENV_VENV_IN_PROJECT: 1
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  PYMONGOIM__MONGO_VERSION: 4.4
  PYMONGOIM__OPERATING_SYSTEM: ubuntu

jobs:
  test:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ["3.9", "pypy-3.9"]
    name: Test Python ${{ matrix.python-version }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          curl -O http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.19_amd64.deb
          sudo dpkg -i libssl1.1_1.1.1f-1ubuntu2.19_amd64.deb || true
          sudo apt-get -f install -y
          sudo ldconfig

      - name: Install MongoDB
        run: |
          curl -fsSL https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list
          sudo apt-get update
          sudo apt-get install -y mongodb-org
          sudo ldconfig

      - name: Set MongoDB Binary
        run: echo "export MONGOD_EXECUTABLE=$(which mongod)" >> $GITHUB_ENV

      - name: Debug MongoDB Binary
        run: |
          ls -l /usr/bin/mongod
          ldd /usr/bin/mongod

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env

      - name: Install Python Dependencies
        id: install
        run: |
          pip install --upgrade pip
          pip install poetry
          poetry install --no-root

      - name: Lint
        if: success() || steps.install.outcome == 'success'
        run: poetry run ruff check ebl

      - name: Code Style
        if: success() || steps.install.outcome == 'success'
        run: poetry run ruff format --check ebl

      - name: Type Check
        if: success() || steps.install.outcome == 'success'
        run: poetry run pyre check

      - name: Download Test Resources
        run: poetry run python -m ebl.tests.downloader

      - name: Unit Tests
        if: ${{ startsWith(matrix.python-version, 'pypy') }}
        env:
          CI: true
        run: poetry run pytest

      - name: Unit Tests with Coverage
        uses: paambaati/codeclimate-action@v3.0.0
        if: ${{ !startsWith(matrix.python-version, 'pypy') }}
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageCommand: poetry run pytest --cov=ebl --cov-report term --cov-report xml

  docker:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [test]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - uses: docker/setup-buildx-action@v1

      - uses: docker/login-action@v1
        with:
          registry: ebl.badw.de
          username: ${{ secrets.EBL_REGISTRY_USERNAME }}
          password: ${{ secrets.EBL_REGISTRY_PASSWORD }}

      - id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ebl.badw.de/ebl-api:master
            ${{format('ebl.badw.de/ebl-api:master.{0}', github.run_number)}}
