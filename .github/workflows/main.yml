name: CI

on:
  push:
  pull_request:
    branches: [master]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PIPENV_VENV_IN_PROJECT: 1
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  PYMONGOIM__MONGO_VERSION: 7.0
  PYMONGOIM__OPERATING_SYSTEM: ubuntu

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "pypy-3.9"]
    name: Test Python ${{ matrix.python-version }}

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl libssl-dev

      - name: Cache Rust
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env

      - name: Install Python Dependencies
        id: install
        run: |
          pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.in-project true
          poetry install --no-root --with dev

      - name: Lint
        if: success() || steps.install.outcome == 'success'
        run: poetry run ruff check ebl

      - name: Code Style
        if: success() || steps.install.outcome == 'success'
        run: poetry run ruff format --check ebl

      - name: Type Check
        if: success() || steps.install.outcome == 'success'
        run: poetry run pyre check

      - name: Download Test Resources
        run: poetry run python -m ebl.tests.downloader

      - name: Unit Tests
        if: ${{ startsWith(matrix.python-version, 'pypy') }}
        env:
          CI: true
          MONGODB_URI: mongodb://localhost:27017
        run: poetry run pytest

      - name: Unit Tests with Coverage
        uses: paambaati/codeclimate-action@v5.0.0
        if: ${{ !startsWith(matrix.python-version, 'pypy') }}
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
          MONGODB_URI: mongodb://localhost:27017
        with:
          coverageCommand: poetry run pytest --cov=ebl --cov-report term --cov-report xml

  docker:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ebl.badw.de
          username: ${{ secrets.EBL_REGISTRY_USERNAME }}
          password: ${{ secrets.EBL_REGISTRY_PASSWORD }}

      - id: docker_build
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            ebl.badw.de/ebl-api:master
            ${{format('ebl.badw.de/ebl-api:master.{0}', github.run_number)}}