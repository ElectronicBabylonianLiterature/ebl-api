import pytest

from ebl.transliteration.domain.enclosure_error import EnclosureError
from ebl.transliteration.domain.enclosure_visitor import EnclosureValidator
from ebl.transliteration.domain.atf_parsers.lark_parser import parse_line


def validate_line(atf) -> None:
    visitor = EnclosureValidator()
    parse_line(f"1. {atf}").accept(visitor)
    visitor.done()


@pytest.mark.parametrize(
    "atf",
    [
        "...",
        "[...]",
        "(...)",
        "[(...)]",
        "<(...)>",
        "<...>",
        "<<...>>",
        "{(...)}",
        "kur-[kur ...]",
        "[... kur]-kur",
        "kur-[kur]-kur",
        "ku[r ...]",
        "[... k]ur",
        "k[u]r",
        "KUR-[KUR ...]",
        "[... KUR]-KUR",
        "KUR-[KUR]-KUR",
        "KU[R ...]",
        "[... K]UR",
        "K[U]R",
        "123-[123 ...]",
        "[... 123]-123",
        "123-[123]-123",
        "12[3 ...]",
        "[... 1]23",
        "1[2]3",
        "ku[r/12[3 ...]",
        "[... K]UR/1]23",
        "k[u]r/K[U]R",
        "[... k]u[r/1 ...]",
        "{k[ur} ...]",
        "{+k[ur} ...]",
        "{{k[ur}} ...]",
        "[... {k]ur}-kur",
        "[... {+k]ur}-kur",
        "[... {{k]ur}}-kur",
        "%n [(kur)-kur ...]",
        "%n [ma-]ma [ma]-ma [...-]ma",
        "%n [(ma-)]ma [ma]-ma [(...)]-ma",
        "%n [(ma-)ma ma]-ma [...(-ma)]",
        "%n [kur-<kur] ...>",
    ],
)
def test_valid(atf):
    validate_line(atf)


@pytest.mark.parametrize(
    "atf",
    [
        "[...",
        "(...",
        "[(...",
        "<(...",
        "<...",
        "<<...",
        "{(...",
        "...]",
        "...)",
        "...)]",
        "...)>",
        "...>",
        "...>>",
        "...)}",
        "kur-[kur",
        "kur]-kur",
        "ku]r",
        "k]ur",
        "kur-(kur",
        "kur)-kur",
        "[kur-(kur]",
        "[kur)-kur]",
        "k[ur",
        "ku]r",
        "k[ur-(kur]",
        "[kur)-ku]r",
        "KUR-[KUR",
        "KUR]-KUR",
        "KU]R",
        "K]UR",
        "[KUR-(KUR]",
        "[KUR)-KUR]",
        "K[UR",
        "KU]R",
        "K[UR-(KUR]",
        "[KUR)-KU]R",
        "123-[123",
        "123]-123",
        "12]3",
        "1]23",
        "[123-(123]",
        "[123)-123]",
        "1[23",
        "12]3",
        "1[23-(123]",
        "[123)-12]3",
        "ku[r/1 ...]",
        "[... KUR/1]23",
        "[(...",
        "<(...",
        "<...",
        "<<...",
        "{(...",
        "...]",
        "...)]",
        "...)>",
        "...>",
        "...>>",
        "...)}",
        "[... (...] ...)",
        "(... [...) ...]",
        "[... (...] [...) ...]",
        "[... [...] ...]",
        "(... (...) ...)",
        "(... [...] ...)",
        "[(... (...) ...)]",
        "[(... [...] ...)]",
        "<(... <(...)> ...)>",
        "<(... (...) ...)>",
        "<([... (...) ...])>",
        "<... <...> ...>",
        "<... (...) ...>",
        "<[... (...) ...]>",
        "<<... <<...>> ...>>",
        "{(... {(...)} ...)}",
        "<(... <...> ...)>",
        "<... <(...)> ...>",
        "{ku[r}",
        "{+ku[r}",
        "{{ku[r}}",
        "%n [ibnû",
        "%n (ibnû",
        "%n [(ibnû",
        "%n ibnû]",
        "%n ibnû)",
        "%n ibnû)]" "[ibnû)]",
        "%n [(ibnû]" "[... [ibnû] ...]",
        "%n [(... [ibnû] ...)]",
        "%n [(... (ibnû) ...)]",
        "%n [[...",
        "%n ...))",
        "%n ([...",
        "%n ...])",
        "%n [[ibnû",
        "%n ((ibnû",
        "%n i([bnû",
        "%n i])bnû",
        "%n i[)]bnû",
        "< %n kur>",
    ],
)
def test_invalid(atf):
    with pytest.raises(EnclosureError):
        validate_line(atf)
