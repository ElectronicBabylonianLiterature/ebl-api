%import common.INT
%import common.LETTER
%import common.LCASE_LETTER
%import .ebl_atf_common (free_text)
%import .ebl_atf_common (object, OBJECT, generic_object, fragment)
%import .ebl_atf_common (surface, SURFACE, generic_surface, face, edge)
%import .ebl_atf_common (seal)

note_line: "#note: " _markup
markup: _markup
_markup: (emphasis_part | language_part | bibliography_part | string_part | url_part)+
language_part: "@" LANGUAGE "{" text "}"
emphasis_part: "@i{" note_text "}"
bibliography_part: "@bib{" escaped_text ("@" escaped_text)? "}"
escaped_text: (/[^@{}\\\n\r]/ | ("\\" /[@{}\\]/))+
string_part: note_text
note_text: /[^@{}\n\r]+/
LANGUAGE: "akk" | "sux" | "es"
url_part: "@url{" url "}" ("{" note_text "}")?
url: /[^}]+/

?parallel_line: parallel_fragment | parallel_text | parallel_composition
parallel_fragment: PARALLEL_LINE_PREFIX [CF] "F " museum_number " " [DUPLICATES " "] [object_label " "] [surface_label " "]  [column_label " "] line_number
!museum_number: /./+ "." /[^.]/+ ("." /[^.]/+)?
DUPLICATES: "&d"
parallel_text: PARALLEL_LINE_PREFIX [CF] text_id " "  [chapter_name " "] line_number
text_id: GENRE " " CATEGORY "." INT
GENRE: "Lex" | "Med" | "L" | "D"
CATEGORY: "0" | CAPITAL_ROMAN_NUMERAL
chapter_name: STAGE " " [quoted_string " "] quoted_string 
quoted_string: "\"" /./+ "\""
STAGE: "ED1_2"
     | "Fara"
     | "Hel"
     | "Hit"
     | "JN"
     | "LB"
     | "MA"
     | "MB"
     | "MElam"
     | "NA"
     | "NB"
     | "NElam"
     | "OA"
     | "OB"
     | "OElam"
     | "PElam"
     | "PSarg"
     | "Par"
     | "Per"
     | "SB"
     | "Sarg"
     | "Unc"
     | "Ur3"
     | "Uruk4"
parallel_composition: PARALLEL_LINE_PREFIX [CF] "(" /./+ " " line_number ")"
CF: "cf. "
PARALLEL_LINE_PREFIX: "// "


translation_line: "#tr" [ "." TRANSLATION_LANGUAGE ] [".(" translation_extent ")"] ": " _markup
TRANSLATION_LANGUAGE: LCASE_LETTER~2
translation_extent: [labels " "] line_number


text_line: line_number "." _WORD_SEPARATOR+ text _WORD_SEPARATOR*
?line_number: line_number_range | single_line_number
line_number_range: single_line_number "-" single_line_number
single_line_number: [LETTER "+"] INT [ANY_PRIME] [LETTER]
ANY_PRIME: PRIME | "′" | "’" 

text: (_shifted_text | _non_normalized_text) (_WORD_SEPARATOR+ _shifted_text)*
_shifted_text: normalized_akkadian_shift _WORD_SEPARATOR+ _normalized_akkadian
             | greek_shift _WORD_SEPARATOR+ _greek
             | language_shift _WORD_SEPARATOR+ _non_normalized_text

_non_normalized_text: _head _tail*
_head: _have_both
     | _require_both
     | _omit_left
     | _omit_right+ _have_both?
_tail: _WORD_SEPARATOR _omit_right* _have_both?
     | _WORD_SEPARATOR? _omit_left+
     | _WORD_SEPARATOR _require_both

_require_both: commentary_protocol
             | divider_variant
             | divider
             | line_break
_have_both: tabulation
         | column_token
         | erasure
         | word
         | lone_determinative

_omit_left.-1: close_broken_away
             | close_perhaps_broken_away
             | close_accidental_omission
             | close_intentional_omission
             | close_removal
             | close_document_oriented_gloss
_omit_right.-1: open_broken_away
             | open_perhaps_broken_away
             | open_accidental_omission
             | open_intentional_omission
             | open_removal
             | open_document_oriented_gloss

divider.5: DIVIDER_SYMBOL modifiers flags
line_break.5: "|"
close_document_oriented_gloss: CLOSE_DOCUMENT_ORIENTED_GLOSS
open_document_oriented_gloss: OPEN_DOCUMENT_ORIENTED_GLOSS
language_shift: SHIFT
normalized_akkadian_shift: NORMALIZED_SHIFT
greek_shift: GREEK_SHIFT

divider_variant: divider _VARIANT_SEPARATOR divider
               | divider _VARIANT_SEPARATOR variant_part
               | variant_part _VARIANT_SEPARATOR divider

tabulation: TABULATION
TABULATION: "($___$)"

column_token: "&" [COLUMN_NUMBER]
COLUMN_NUMBER: "1".."9" ("0".."9")*

commentary_protocol: PROTOCOL_QUOTATION
                   | PROTOCOL_BASE_TEXT
                   | PROTOCOL_COMMENTARY
                   | PROTOCOL_UNCERTAIN
PROTOCOL_QUOTATION: "!qt"
PROTOCOL_BASE_TEXT: "!bs"
PROTOCOL_COMMENTARY: "!cm"
PROTOCOL_UNCERTAIN: "!zz"

DOCUMENT_ORIENTED_GLOSS: OPEN_DOCUMENT_ORIENTED_GLOSS
                       | CLOSE_DOCUMENT_ORIENTED_GLOSS
OPEN_DOCUMENT_ORIENTED_GLOSS: "{("
CLOSE_DOCUMENT_ORIENTED_GLOSS: ")}"

NORMALIZED_SHIFT: "%n"
GREEK_SHIFT.1: "%grc" | "%akkgrc" | "%suxgrc"
SHIFT: "%" ("a".."z" | "A".."Z" | "0".."9") ("a".."z" | "A".."Z" | "0".."9")+
     | "%" ("a".."m" | "o".."z" | "A".."Z" | "0".."9") 

erasure.-1: "°" erasure_part "\\" erasure_part "°"
erasure_part: ((divider | word | lone_determinative) (_WORD_SEPARATOR (divider | word | lone_determinative))*)?

_WORD_SEPARATOR: " "

?any_word: lone_determinative
         | word

DIVIDER_SYMBOL: ":'" | ":\"" | ":." | "::" | ":" | ";" | "/"

?broken_away: open_broken_away | close_broken_away
open_broken_away: "["
close_broken_away: "]"
open_perhaps_broken_away: "("
close_perhaps_broken_away: ")"
open_accidental_omission: "<"
close_accidental_omission: ">"
open_intentional_omission: "<("
close_intentional_omission: ")>"
open_removal: "<<"
close_removal: ">>"

lone_determinative.4: _any_open? (phonetic_gloss | determinative) _any_close?

word.3: _any_open? _word_body _any_close?
_word_body: (inline_erasure _loose_joiner?)* _parts (_loose_joiner? inline_erasure (_loose_joiner? _parts)?)*

inline_erasure: "°" inline_erasure_part "\\" inline_erasure_part "°"
inline_erasure_part: _parts?

_parts: value _parts_tail*
      | gloss (_loose_joiner? value)? _parts_tail*
_parts_tail: _strict_joiner value
           | _loose_joiner? (gloss _loose_joiner?)+ value?

?gloss: linguistic_gloss | phonetic_gloss | determinative
linguistic_gloss: "{{" gloss_body "}}"
phonetic_gloss: "{+" gloss_body "}"
determinative: "{" gloss_body "}"
gloss_body: open_omission_or_removal* value (_strict_joiner value)* close_omission_or_removal*
?open_omission_or_removal: open_accidental_omission | open_intentional_omission | open_removal
?close_omission_or_removal: close_accidental_omission | close_intentional_omission | close_removal



_loose_joiner: _strict_joiner
             | in_word_newline? _any_close joiner? _any_open?
             | in_word_newline? joiner? _any_open
_strict_joiner: in_word_newline? _any_close? joiner _any_open?
_any_close: (close_broken_away | close_perhaps_broken_away | close_accidental_omission | close_intentional_omission | close_removal)+
_any_open: (open_accidental_omission | open_intentional_omission | open_removal | open_broken_away | open_perhaps_broken_away)+
!joiner: _WORD_SEPARATOR* ("-" | "+" | "." | ":" | ";") _WORD_SEPARATOR*

?value: unidentified_sign
      | unclear_sign
      | unknown_number_of_signs
      | reading
      | number
      | logogram
      | surrogate
      | compound_grapheme
      | variant
      | egyptian_metrical_feet_separator

variant: variant_part (_VARIANT_SEPARATOR variant_part)+
?variant_part: unidentified_sign
             | unclear_sign
             | reading
             | logogram
             | surrogate
             | number
             | compound_grapheme



egyptian_metrical_feet_separator: "•" flags

number: number_name modifiers flags ["(" any_grapheme ")"]
reading: value_name sub_index modifiers flags ["(" any_grapheme ")"]
logogram: logogram_name sub_index modifiers flags ["(" any_grapheme ")"]
surrogate: logogram_name sub_index modifiers flags "<(" surrogate_text ")>"
surrogate_text: reading (joiner reading)*
sub_index: [SUB_INDEX]

number_name: number_name_head (broken_away number_name_part)*
value_name: value_name_part (broken_away value_name_part)*
logogram_name: logogram_name_part (broken_away logogram_name_part)*
!number_name_head:  "0".."9" "0".."9"* | "½" | "⅓" | "⅔" | "⅚" | "ø"
!number_name_part:  "0".."9"+
value_name_part: VALUE_CHARACTER+
logogram_name_part: LOGOGRAM_CHARACTER+
VALUE_CHARACTER: "a" | "ā" | "â" | "b" | "d" | "e" | "ē" | "ê" | "f" | "g"
               | "ĝ" | "h" | "i" | "ī" | "î" | "y" | "k" | "l" | "m" | "n"
               | "p" | "q" | "r" | "s" | "ṣ" | "š" | "t" | "ṭ" | "u" | "ū"
               | "û" | "w" | "z" | "ḫ" | "ʾ"
LOGOGRAM_CHARACTER : "A" | "Ā" | "Â" | "B" | "D" | "E" | "Ē" | "Ê" | "G" | "Ĝ" | "H"
                   | "I" | "Ī" | "Î" | "Y" | "K" | "L" | "M" | "N" | "P" | "Q" | "R"
                   | "S" | "Ṣ" | "Š" | "T" | "Ṭ" | "U" | "Ū" | "Û" | "W" | "Z" | "Ḫ"
                   | "ʾ"

?any_grapheme: compound_grapheme | grapheme
compound_grapheme: "|" COMPOUND_FRAGMENT ("." COMPOUND_FRAGMENT)* "|"
COMPOUND_FRAGMENT: SUB_COMPOUND (COMPOUND_OPERATOR SUB_COMPOUND)*
SUB_COMPOUND: "(" COMPOUND_PART ((COMPOUND_OPERATOR | COMPOUND_OPERATOR_DOT) COMPOUND_PART)* ")"
            | COMPOUND_PART
COMPOUND_PART: GRAPHEME (VARIANT_SEPARATOR GRAPHEME)*
COMPOUND_OPERATOR_DOT: "." 
COMPOUND_OPERATOR: "×" | "%" | "&" | "+"

grapheme: GRAPHEME_NAME modifiers flags
GRAPHEME: GRAPHEME_NAME MODIFIER* FLAG
GRAPHEME_NAME: GRAPHEME_CHARACTER (GRAPHEME_CHARACTER)* SUB_INDEX?
GRAPHEME_CHARACTER: "a".."z"
                  | "A".."Z"
                  | "Ṣ" | "Š" | "Ṭ"
                  | "ṣ" | "š" | "ṭ"
                  | "0".."9"

SUB_INDEX: NUMERIC_SUB_INDEX | "ₓ"
NUMERIC_SUB_INDEX: "₀" | "₁".."₉" ("₀".."₉")*

unidentified_sign: "X" flags
unclear_sign: "x" flags

_VARIANT_SEPARATOR: VARIANT_SEPARATOR
VARIANT_SEPARATOR: "/"

flags: (UNCERTAIN | CORRECTION | COLLATION| DAMAGE)*
FLAG: (UNCERTAIN | CORRECTION | COLLATION| DAMAGE)*
DAMAGE: "#"

modifiers: MODIFIER*
MODIFIER: ("@" (MODIFIER_CHARACTER | ("0".."9")+))
MODIFIER_CHARACTER: "c" | "f" | "g" | "s" | "t" | "n" | "z" | "k" | "r" | "h" | "v"

in_word_newline: IN_WORD_NEWLINE
IN_WORD_NEWLINE: ";"

unknown_number_of_signs: UNKNOWN_NUMBER_OF_SIGNS
UNKNOWN_NUMBER_OF_SIGNS: "..."


_normalized_akkadian: _normalized_text (_WORD_SEPARATOR break _WORD_SEPARATOR _normalized_text)*

_normalized_text: (akkadian_word | _lacuna) (_WORD_SEPARATOR (akkadian_word | _lacuna))*

?break: certain_caesura | uncertain_caesura | certain_foot_separator | uncertain_foot_separator
certain_caesura: _CAESURA
uncertain_caesura: "(" _CAESURA ")"
_CAESURA: "||"
certain_foot_separator: _FOOT_SEPARATOR
uncertain_foot_separator: "(" _FOOT_SEPARATOR ")"
_FOOT_SEPARATOR: "|"

_lacuna: enclosure_open* unknown_number_of_signs enclosure_close*

akkadian_word: parts normalized_modifiers closing_enclosures
parts: _akkadian_word_head _akkadian_word_body*
_akkadian_word_head: enclosure_open* (unknown_number_of_signs _between_strings)? _part_sequence
_akkadian_word_body: _between_strings (akkadian_string unknown_number_of_signs)+ akkadian_string?
                   | _between_strings (unknown_number_of_signs akkadian_string)+ unknown_number_of_signs?
                   | _between_strings akkadian_string
                   | _between_strings unknown_number_of_signs
_part_sequence: (akkadian_string unknown_number_of_signs)+ akkadian_string?
              | (unknown_number_of_signs akkadian_string)+ unknown_number_of_signs?
              | akkadian_string

normalized_modifiers: normalized_modifier~0..3
normalized_modifier: DAMAGE | UNCERTAIN | CORRECTION
_between_strings: enclosure+ separator
                | separator enclosure+
                | enclosure+
                | separator
separator: "-"

closing_enclosures: enclosure_close*
?enclosure: enclosure_open | enclosure_close
?enclosure_open: open_broken_away | open_perhaps_broken_away | open_emendation
?enclosure_close: close_broken_away | close_perhaps_broken_away | close_emendation
open_emendation: "<"
close_emendation: ">"

akkadian_string: AKKADIAN_ALPHABET+
AKKADIAN_ALPHABET: "ʾ" | "A" | "B" | "D" | "E" | "G" | "H" | "I" | "K" | "L"
                 | "M" | "N" | "P" | "S" | "T" | "U" | "Y" | "Z" | "a" | "b"
                 | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "k" | "l" | "m"
                 | "n" | "p" | "q" | "r" | "s" | "t" | "u" | "w" | "y" | "z"
                 | "É" | "â" | "ê" | "î" | "û" | "ā" | "Ē" | "ē" | "ī" | "Š"
                 | "š" | "ū" | "ṣ" | "ṭ" | "₄"

_greek: greek_token (_WORD_SEPARATOR greek_token)*
?greek_token: greek_word
            | column_token
greek_word: (greek_enclosure | greek_word_part)* greek_word_part (greek_enclosure | greek_word_part)*
?greek_word_part: greek_letter
                | unidentified_sign
                | unclear_sign
                | unknown_number_of_signs
?greek_enclosure: _any_open | _any_close
greek_letter: GREEK_ALPHABET flags
GREEK_ALPHABET: "Α" | "α" | "Β" | "β" | "Γ" | "γ" | "Δ" | "δ" | "Ε" | "ε"
              | "Ζ" | "ζ" | "Η" | "η" | "Θ" | "θ" | "Ι" | "ι" | "Κ" | "κ"
              | "Λ" | "λ" | "Μ" | "μ" | "Ν" | "ν" | "Ξ" | "ξ" | "Ο" | "ο"
              | "Π" | "π" | "Ρ" | "ρ" | "Σ" | "σ" | "ς" | "Τ" | "τ" | "Υ"
              | "υ" | "Φ" | "φ" | "Χ" | "χ" | "Ψ" | "ψ" | "Ω" | "ω"


labels: surface_label " " column_label
      | surface_label
      | column_label

object_label: (TABLET | ENVELOPE | PRIMS | BULLA) status
TABLET: "tablet"
ENVELOPE: "envelope"
PRIMS: "prism"
BULLA: "bulla"

column_label: ROMAN_NUMERAL status
ROMAN_NUMERAL: /[ivxlcdm]+/
CAPITAL_ROMAN_NUMERAL: /[IVXLCDM]+/

surface_label: (OBVERSE | REVERSE | BOTTOM | EDGE | LEFT | RIGHT | TOP) status
OBVERSE: "o"
REVERSE:"r"
BOTTOM: "b.e."
EDGE: "e."
LEFT: "l.e."
RIGHT: "r.e."
TOP: "t.e."


?at_line: "@" at_line_value

?at_line_value:  seal | column | heading | discourse | object_with_status | surface_with_status | divisions | composite

surface_with_status: surface " "? status

object_with_status: object " "? status

column: "column " INT " "? status

heading: "h" INT [ " " _markup ]

!discourse: "catchline" | "colophon" | "date" | "signature" | "signatures" | "summary" | "witnesses"

divisions: "m=division " free_text [" " INT]

?composite: composite_composite | composite_start | composite_end | composite_milestone
composite_start: "div " free_text [" " INT]
composite_end: "end " free_text
composite_composite: "composite"
composite_milestone: "m=locator " free_text [" " INT]


status: (PRIME | UNCERTAIN | CORRECTION | COLLATION)*
PRIME: "'"
UNCERTAIN: "?"
CORRECTION: "!"
COLLATION: "*"